import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath group: 'eu.appsatori', name: 'gradle-fatjar-plugin', version: '0.3'
        classpath group: 'com.github.rodionmoiseev.gradle.plugins', name: 'idea-utils', version: '0.2'
        classpath group: 'de.undercouch', name: 'gradle-download-task', version: '1.2'
    }
}

apply plugin: 'java'
apply plugin: 'eu.appsatori.fatjar'
apply plugin: 'de.undercouch.download'

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'idea-utils'

idea {
    project {
        ipr {
            withXml { xmlProvider ->
                def project = xmlProvider.asNode()
                def runConfigs = new XmlParser().parse(new File("config/intellij_runconfigs.txt"))
                project.append(runConfigs)
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = project.property("group")
version = project.property("version")
sourceCompatibility = project.property("sourceversion")

dependencies {
  if (project.property("apitype") == "SPIGOT") {
    compile group: 'org.spigotmc', name: 'spigot-api', version: project.property("apiversion"), { ext { fatJarExclude = true } }
    compile group: 'org.spigotmc', name: 'spigot', version: project.property("apiversion"), { ext { fatJarExclude = true } }
  } else if (project.property("apitype") == "BUKKIT") {
    compile group: 'org.spigotmc', name: 'bukkit', version: project.property("apiversion"), { ext { fatJarExclude = true } }
    compile group: 'org.bukkit', name: 'craftbukkit', version: project.property("apiversion"), { ext { fatJarExclude = true } }
  }
  // dependencies go here
  // Example:
  // compile group: 'com.google.guava', name: 'guava', version: '18.0'
}

processResources {
    filter ReplaceTokens, tokens: [
            "apiversion": project.property("apiversion"),
            "apitype"      : project.property("apitype"),
            "version"      : project.property("version")
    ]
}

task setupWorkspace(dependsOn: ['buildSpigot']) {
}

clean {
    delete "final/"
    delete "testserver/"
}

task deploy(type: Copy, dependsOn: ['build']) {
    from "${buildDir}/libs"
    into "final/"
}

task setupDevServer(type: Copy) {
    from 'config/serverfiles'
    into 'testserver'
}

task cleanPlugins() {
    delete "testserver/plugins"
}

task copyPluginToTestserver(dependsOn: ['build'], type: Copy) {
    from "${buildDir}/libs"
    into "testserver/plugins"
}

task startDevServer(dependsOn: ['cleanPlugins', 'copyPluginToTestserver', 'setupDevServer'], type: JavaExec) {
    classpath configurations.compile
    main = "org.bukkit.craftbukkit.Main"
    workingDir = "testserver/"
    standardInput = System.in
}

jar {
    actions = []
    dependsOn = []
    dependsOn('fatJar')
}

// START Building Spigot and Bukkit

def spigotBuildDir = new File("$buildDir/spigot/")

task buildSpigot(type: JavaExec) {
    if (hasBukkit() && hasSpigot()) {
        enabled = false;
        dependsOn = [];
    } else {
      dependsOn = ['cleanSpigotBuild', 'downloadBuildTool']
    }
    main = '-jar'
    args new File(spigotBuildDir, "BuildTools.jar").getAbsolutePath(), "--rev", project.property("apibuildtoolversion")
    workingDir = spigotBuildDir
}

task downloadBuildTool(type: Download) {
    spigotBuildDir.mkdirs()
    src project.property("buildtoolurl")
    dest new File(spigotBuildDir, "BuildTools.jar")
}

task cleanSpigotBuild() {
    spigotBuildDir.deleteDir()
}

def hasBukkit() {
    def groupId = "org.bukkit"
    def version = project.property("apiversion")
    return hasArtifact(groupId, "bukkit", version) && hasArtifact(groupId, "craftbukkit", version)
}

def hasSpigot() {
    def groupId = "org.spigotmc"
    def version = project.property("apiversion")
    return hasArtifact(groupId, "spigot-api", version) && hasArtifact(groupId, "spigot", version)
}

def hasArtifact(groupId, artifactId, version) {
    def localMavenRepo = new File(new File(ant.properties['user.home'] as String), ".m2/repository/")
    def file = new File(localMavenRepo, groupId.replace('.', '/') + "/" + artifactId + "/" + version + "/")
    return file.exists()
}

// END Building Spigot and Bukkit
